{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MovieRecommendations\\\\frontend\\\\src\\\\components\\\\page\\\\RecommendPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Navbar from '../ui/Navbar';\nimport Chatbot from '../list/Chatbot'; // 새롭게 만든 Chatbot 컴포넌트\nimport '../styles/RecommendPage.css';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RecommendPage = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const navigate = useNavigate();\n  const [recommendations, setRecommendations] = useState([]);\n  const [nickname, setNickname] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 채팅창 상태\n  const [chatOpen, setChatOpen] = useState(false);\n  const fetchRecommendationReason = async movieCd => {\n    try {\n      const response = await fetch(`/llm-reason`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: movieCd\n        })\n      });\n      if (!response.ok) {\n        console.error(`추천 이유 요청 실패: ${response.status}`);\n        return '추천 이유를 가져올 수 없습니다.';\n      }\n      const data = await response.json();\n      return data.llm_response || '추천 이유 없음';\n    } catch (error) {\n      console.error(`추천 이유 요청 중 오류 발생: ${error}`);\n      return '추천 이유를 가져올 수 없습니다.';\n    }\n  };\n\n  // 채팅 버튼 클릭 핸들러\n  const handleChatButtonClick = () => {\n    navigate('/llm');\n  };\n  useEffect(() => {\n    const fetchNicknameAndRecommendations = async () => {\n      const accessToken = localStorage.getItem('token'); // 토큰 받아오기\n\n      if (!userId || !accessToken) {\n        setError('로그인이 필요합니다.');\n        setLoading(false);\n        return;\n      }\n      try {\n        var _nicknameData$member;\n        // 닉네임 가져오기\n        const nicknameResponse = await fetch(`/member/user/${userId}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        if (!nicknameResponse.ok) {\n          const errorMessage = await nicknameResponse.text();\n          throw new Error(`닉네임 요청 실패: ${errorMessage}`);\n        }\n        const nicknameData = await nicknameResponse.json();\n        setNickname(((_nicknameData$member = nicknameData.member) === null || _nicknameData$member === void 0 ? void 0 : _nicknameData$member.nickname) || '');\n\n        // 추천 영화 가져오기\n        const recommendationsResponse = await fetch(`/api/ai/predict/${userId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        if (!recommendationsResponse.ok) {\n          const errorMessage = await recommendationsResponse.text();\n          throw new Error(`추천 요청 실패: ${errorMessage}`);\n        }\n        const recommendationsData = await recommendationsResponse.json();\n\n        // movieCd 기반 상세 영화 데이터와 추천 이유 가져오기\n        const movies = await Promise.all(recommendationsData.map(async movie => {\n          try {\n            const detailResponse = await fetch(`/api/movies/detail/${movie.movieCd}?language=ko`, {\n              headers: {\n                Authorization: `Bearer ${accessToken}`\n              }\n            });\n            if (!detailResponse.ok) {\n              console.error(`영화 상세 정보 요청 실패: ${movie.movieCd}`);\n              return null;\n            }\n            const detailData = await detailResponse.json();\n            const reason = await fetchRecommendationReason(movie.movieCd); // 추천 이유 가져오기\n\n            return {\n              id: movie.movieCd,\n              title: detailData.title,\n              posterPath: detailData.poster_path ? `https://image.tmdb.org/t/p/w500${detailData.poster_path}` : null,\n              reason\n            };\n          } catch (error) {\n            console.error(`영화 상세 정보 요청 중 오류 발생: ${movie.movieCd}`, error);\n            return null;\n          }\n        }));\n        setRecommendations(movies.filter(movie => movie !== null)); // 유효한 데이터만 추가\n      } catch (error) {\n        console.error('Error:', error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchNicknameAndRecommendations();\n  }, [userId]);\n  const handleMovieClick = movieId => {\n    navigate(`/api/movies/detail/${movieId}?language=ko`);\n  };\n  const [expanded, setExpanded] = useState({}); // 추천 이유 펼치기 상태 관리\n\n  const toggleExpand = id => {\n    setExpanded(prev => ({\n      ...prev,\n      [id]: !prev[id]\n    }));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommend-page\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recommend-content\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recommend-page\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommend-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [nickname, \" \\uB2D8\\uC744 \\uC704\\uD55C \\uCD94\\uCC9C \\uC601\\uD654\\uB294?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-list\",\n        children: recommendations.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleMovieClick(movie.id),\n            children: [\" \", movie.posterPath ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: movie.posterPath,\n              alt: movie.title,\n              className: \"movie-poster\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-poster\",\n              children: \"\\uD3EC\\uC2A4\\uD130 \\uC5C6\\uC74C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"movie-title\",\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-reason\",\n            children: expanded[movie.id] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: movie.reason\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => toggleExpand(movie.id),\n                children: \"\\uC811\\uAE30\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [movie.reason.slice(0, 100), movie.reason.length > 100 ? '...' : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 23\n              }, this), movie.reason.length > 100 && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => toggleExpand(movie.id),\n                children: \"\\uC790\\uC138\\uD788 \\uBCF4\\uAE30\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 17\n          }, this)]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-button\",\n      \"aria-label\": \"\\uCC57\\uBD07 \\uC5F4\\uAE30\",\n      onClick: handleChatButtonClick,\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(RecommendPage, \"cbKb5Q+MwOBrplSwnv6emoebjpQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = RecommendPage;\nexport default RecommendPage;\nvar _c;\n$RefreshReg$(_c, \"RecommendPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Navbar","Chatbot","jsxDEV","_jsxDEV","Fragment","_Fragment","RecommendPage","_s","userId","navigate","recommendations","setRecommendations","nickname","setNickname","error","setError","loading","setLoading","chatOpen","setChatOpen","fetchRecommendationReason","movieCd","response","fetch","method","headers","body","JSON","stringify","text","ok","console","status","data","json","llm_response","handleChatButtonClick","fetchNicknameAndRecommendations","accessToken","localStorage","getItem","_nicknameData$member","nicknameResponse","Authorization","errorMessage","Error","nicknameData","member","recommendationsResponse","recommendationsData","movies","Promise","all","map","movie","detailResponse","detailData","reason","id","title","posterPath","poster_path","filter","message","handleMovieClick","movieId","expanded","setExpanded","toggleExpand","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","slice","length","_c","$RefreshReg$"],"sources":["C:/Users/MovieRecommendations/frontend/src/components/page/RecommendPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Navbar from '../ui/Navbar';\nimport Chatbot from '../list/Chatbot'; // 새롭게 만든 Chatbot 컴포넌트\nimport '../styles/RecommendPage.css';\nimport '../styles/Chatbot.css';\n\nconst RecommendPage = () => {\n  const { userId } = useParams();\n  const navigate = useNavigate();\n  const [recommendations, setRecommendations] = useState([]);\n  const [nickname, setNickname] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 채팅창 상태\n  const [chatOpen, setChatOpen] = useState(false);\n\n  const fetchRecommendationReason = async (movieCd) => {\n    try {\n      const response = await fetch(`/llm-reason`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text: movieCd }),\n      });\n\n      if (!response.ok) {\n        console.error(`추천 이유 요청 실패: ${response.status}`);\n        return '추천 이유를 가져올 수 없습니다.';\n      }\n\n      const data = await response.json();\n      return data.llm_response || '추천 이유 없음';\n    } catch (error) {\n      console.error(`추천 이유 요청 중 오류 발생: ${error}`);\n      return '추천 이유를 가져올 수 없습니다.';\n    }\n  };\n\n  // 채팅 버튼 클릭 핸들러\n  const handleChatButtonClick = () => {\n    navigate('/llm');\n  };\n\n  useEffect(() => {\n    const fetchNicknameAndRecommendations = async () => {\n      const accessToken = localStorage.getItem('token'); // 토큰 받아오기\n\n      if (!userId || !accessToken) {\n        setError('로그인이 필요합니다.');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // 닉네임 가져오기\n        const nicknameResponse = await fetch(`/member/user/${userId}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n\n        if (!nicknameResponse.ok) {\n          const errorMessage = await nicknameResponse.text();\n          throw new Error(`닉네임 요청 실패: ${errorMessage}`);\n        }\n\n        const nicknameData = await nicknameResponse.json();\n        setNickname(nicknameData.member?.nickname || '');\n\n        // 추천 영화 가져오기\n        const recommendationsResponse = await fetch(`/api/ai/predict/${userId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n\n        if (!recommendationsResponse.ok) {\n          const errorMessage = await recommendationsResponse.text();\n          throw new Error(`추천 요청 실패: ${errorMessage}`);\n        }\n\n        const recommendationsData = await recommendationsResponse.json();\n\n        // movieCd 기반 상세 영화 데이터와 추천 이유 가져오기\n        const movies = await Promise.all(\n          recommendationsData.map(async (movie) => {\n            try {\n              const detailResponse = await fetch(\n                `/api/movies/detail/${movie.movieCd}?language=ko`,\n                {\n                  headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                  },\n                }\n              );\n\n              if (!detailResponse.ok) {\n                console.error(`영화 상세 정보 요청 실패: ${movie.movieCd}`);\n                return null;\n              }\n\n              const detailData = await detailResponse.json();\n\n              const reason = await fetchRecommendationReason(movie.movieCd); // 추천 이유 가져오기\n\n              return {\n                id: movie.movieCd,\n                title: detailData.title,\n                posterPath: detailData.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${detailData.poster_path}`\n                  : null,\n                reason,\n              };\n            } catch (error) {\n              console.error(`영화 상세 정보 요청 중 오류 발생: ${movie.movieCd}`, error);\n              return null;\n            }\n          })\n        );\n\n        setRecommendations(movies.filter((movie) => movie !== null)); // 유효한 데이터만 추가\n      } catch (error) {\n        console.error('Error:', error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchNicknameAndRecommendations();\n  }, [userId]);\n\n  const handleMovieClick = (movieId) => {\n    navigate(`/api/movies/detail/${movieId}?language=ko`);\n  };\n\n  const [expanded, setExpanded] = useState({}); // 추천 이유 펼치기 상태 관리\n\n  const toggleExpand = (id) => {\n    setExpanded((prev) => ({\n      ...prev,\n      [id]: !prev[id],\n    }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"recommend-page\">\n        <Navbar />\n        <div className=\"recommend-content\">\n          <p>데이터를 불러오는 중입니다...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"recommend-page\">\n      <Navbar />\n      <div className=\"recommend-content\">\n        <h2>{nickname} 님을 위한 추천 영화는?</h2>\n        {error ? (\n          <p className=\"error-message\">{error}</p>\n        ) : (\n          <div className=\"movie-list\">\n            {recommendations.map((movie) => (\n              <div className=\"movie-item\" key={movie.id}>\n                <div onClick={() => handleMovieClick(movie.id)}> {/* 영화 상세 이동 */}\n                  {movie.posterPath ? (\n                    <img\n                      src={movie.posterPath}\n                      alt={movie.title}\n                      className=\"movie-poster\"\n                    />\n                  ) : (\n                    <div className=\"no-poster\">포스터 없음</div>\n                  )}\n                  <h3 className=\"movie-title\">{movie.title}</h3>\n                </div>\n\n                {/* 추천 이유 */}\n                <div className=\"movie-reason\">\n                  {expanded[movie.id] ? (\n                    <>\n                      <p>{movie.reason}</p>\n                      <button onClick={() => toggleExpand(movie.id)}>\n                        접기\n                      </button>\n                    </>\n                  ) : (\n                    <>\n                      <p>\n                        {movie.reason.slice(0, 100)}\n                        {movie.reason.length > 100 ? '...' : ''}\n                      </p>\n                      {movie.reason.length > 100 && (\n                        <button onClick={() => toggleExpand(movie.id)}>\n                          자세히 보기\n                        </button>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 챗봇 버튼 */}\n      <button\n        className=\"chatbot-button\"\n        aria-label=\"챗봇 열기\"\n        onClick={handleChatButtonClick}\n      >\n        💬\n      </button>\n    </div>\n  );\n};\n\nexport default RecommendPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}