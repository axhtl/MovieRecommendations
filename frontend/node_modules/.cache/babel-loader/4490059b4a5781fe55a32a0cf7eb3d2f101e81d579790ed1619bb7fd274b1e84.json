{"ast":null,"code":"import _objectSpread from\"C:/Users/MovieRecommendations/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{useParams,useNavigate}from'react-router-dom';import Navbar from'../ui/Navbar';import Chatbot from'../list/Chatbot';// 새롭게 만든 Chatbot 컴포넌트\nimport'../styles/RecommendPage.css';import'../styles/Chatbot.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const RecommendPage=()=>{const{userId}=useParams();const navigate=useNavigate();const[recommendations,setRecommendations]=useState([]);const[nickname,setNickname]=useState('');const[error,setError]=useState(null);const[loading,setLoading]=useState(true);// 채팅창 상태\nconst[chatOpen,setChatOpen]=useState(false);const fetchRecommendationReason=async movieCd=>{try{const response=await fetch(\"http://127.0.0.1:8080/llm-reason\",{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text:movieCd})});if(!response.ok){console.error(\"\\uCD94\\uCC9C \\uC774\\uC720 \\uC694\\uCCAD \\uC2E4\\uD328: \".concat(response.status));return'추천 이유를 가져올 수 없습니다.';}const data=await response.json();return data.llm_response||'추천 이유 없음';}catch(error){console.error(\"\\uCD94\\uCC9C \\uC774\\uC720 \\uC694\\uCCAD \\uC911 \\uC624\\uB958 \\uBC1C\\uC0DD: \".concat(error));return'추천 이유를 가져올 수 없습니다.';}};useEffect(()=>{const fetchNicknameAndRecommendations=async()=>{const accessToken=localStorage.getItem('token');// 토큰 받아오기\nif(!userId||!accessToken){setError('로그인이 필요합니다.');setLoading(false);return;}try{var _nicknameData$member;// 닉네임 가져오기\nconst nicknameResponse=await fetch(\"/member/user/\".concat(userId),{headers:{Authorization:\"Bearer \".concat(accessToken)}});if(!nicknameResponse.ok){const errorMessage=await nicknameResponse.text();throw new Error(\"\\uB2C9\\uB124\\uC784 \\uC694\\uCCAD \\uC2E4\\uD328: \".concat(errorMessage));}const nicknameData=await nicknameResponse.json();setNickname(((_nicknameData$member=nicknameData.member)===null||_nicknameData$member===void 0?void 0:_nicknameData$member.nickname)||'');// 추천 영화 가져오기\nconst recommendationsResponse=await fetch(\"/api/ai/predict/\".concat(userId),{method:'POST',headers:{'Content-Type':'application/json',Authorization:\"Bearer \".concat(accessToken)}});if(!recommendationsResponse.ok){const errorMessage=await recommendationsResponse.text();throw new Error(\"\\uCD94\\uCC9C \\uC694\\uCCAD \\uC2E4\\uD328: \".concat(errorMessage));}const recommendationsData=await recommendationsResponse.json();// movieCd 기반 상세 영화 데이터와 추천 이유 가져오기\nconst movies=await Promise.all(recommendationsData.map(async movie=>{try{const detailResponse=await fetch(\"/api/movies/detail/\".concat(movie.movieCd,\"?language=ko\"),{headers:{Authorization:\"Bearer \".concat(accessToken)}});if(!detailResponse.ok){console.error(\"\\uC601\\uD654 \\uC0C1\\uC138 \\uC815\\uBCF4 \\uC694\\uCCAD \\uC2E4\\uD328: \".concat(movie.movieCd));return null;}const detailData=await detailResponse.json();const reason=await fetchRecommendationReason(movie.movieCd);// 추천 이유 가져오기\nreturn{id:movie.movieCd,title:detailData.title,posterPath:detailData.poster_path?\"https://image.tmdb.org/t/p/w500\".concat(detailData.poster_path):null,reason};}catch(error){console.error(\"\\uC601\\uD654 \\uC0C1\\uC138 \\uC815\\uBCF4 \\uC694\\uCCAD \\uC911 \\uC624\\uB958 \\uBC1C\\uC0DD: \".concat(movie.movieCd),error);return null;}}));setRecommendations(movies.filter(movie=>movie!==null));// 유효한 데이터만 추가\n}catch(error){console.error('Error:',error.message);setError(error.message);}finally{setLoading(false);}};fetchNicknameAndRecommendations();},[userId]);const handleMovieClick=movieId=>{navigate(\"/api/movies/detail/\".concat(movieId,\"?language=ko\"));};const[expanded,setExpanded]=useState({});// 추천 이유 펼치기 상태 관리\nconst toggleExpand=id=>{setExpanded(prev=>_objectSpread(_objectSpread({},prev),{},{[id]:!prev[id]}));};if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:\"recommend-page\",children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsx(\"div\",{className:\"recommend-content\",children:/*#__PURE__*/_jsx(\"p\",{children:\"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"})})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"recommend-page\",children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"recommend-content\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[nickname,\" \\uB2D8\\uC744 \\uC704\\uD55C \\uCD94\\uCC9C \\uC601\\uD654\\uB294?\"]}),error?/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error}):/*#__PURE__*/_jsx(\"div\",{className:\"movie-list\",children:recommendations.map(movie=>/*#__PURE__*/_jsxs(\"div\",{className:\"movie-item\",children:[/*#__PURE__*/_jsxs(\"div\",{onClick:()=>handleMovieClick(movie.id),children:[\" \",movie.posterPath?/*#__PURE__*/_jsx(\"img\",{src:movie.posterPath,alt:movie.title,className:\"movie-poster\"}):/*#__PURE__*/_jsx(\"div\",{className:\"no-poster\",children:\"\\uD3EC\\uC2A4\\uD130 \\uC5C6\\uC74C\"}),/*#__PURE__*/_jsx(\"h3\",{className:\"movie-title\",children:movie.title})]}),/*#__PURE__*/_jsx(\"div\",{className:\"movie-reason\",children:expanded[movie.id]?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{children:movie.reason}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>toggleExpand(movie.id),children:\"\\uC811\\uAE30\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[movie.reason.slice(0,100),movie.reason.length>100?'...':'']}),movie.reason.length>100&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>toggleExpand(movie.id),children:\"\\uC790\\uC138\\uD788 \\uBCF4\\uAE30\"})]})})]},movie.id))})]}),/*#__PURE__*/_jsx(\"button\",{className:\"chatbot-button\",\"aria-label\":\"\\uCC57\\uBD07 \\uC5F4\\uAE30\",onClick:()=>setChatOpen(!chatOpen),children:\"\\uD83D\\uDCAC\"}),/*#__PURE__*/_jsx(Chatbot,{isOpen:chatOpen,onClose:()=>setChatOpen(false)})]});};export default RecommendPage;","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Navbar","Chatbot","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","RecommendPage","userId","navigate","recommendations","setRecommendations","nickname","setNickname","error","setError","loading","setLoading","chatOpen","setChatOpen","fetchRecommendationReason","movieCd","response","fetch","method","headers","body","JSON","stringify","text","ok","console","concat","status","data","json","llm_response","fetchNicknameAndRecommendations","accessToken","localStorage","getItem","_nicknameData$member","nicknameResponse","Authorization","errorMessage","Error","nicknameData","member","recommendationsResponse","recommendationsData","movies","Promise","all","map","movie","detailResponse","detailData","reason","id","title","posterPath","poster_path","filter","message","handleMovieClick","movieId","expanded","setExpanded","toggleExpand","prev","_objectSpread","className","children","onClick","src","alt","slice","length","isOpen","onClose"],"sources":["C:/Users/MovieRecommendations/frontend/src/components/page/RecommendPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Navbar from '../ui/Navbar';\nimport Chatbot from '../list/Chatbot'; // 새롭게 만든 Chatbot 컴포넌트\nimport '../styles/RecommendPage.css';\nimport '../styles/Chatbot.css';\n\nconst RecommendPage = () => {\n  const { userId } = useParams();\n  const navigate = useNavigate();\n  const [recommendations, setRecommendations] = useState([]);\n  const [nickname, setNickname] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 채팅창 상태\n  const [chatOpen, setChatOpen] = useState(false);\n\n  const fetchRecommendationReason = async (movieCd) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8080/llm-reason`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text: movieCd }),\n      });\n\n      if (!response.ok) {\n        console.error(`추천 이유 요청 실패: ${response.status}`);\n        return '추천 이유를 가져올 수 없습니다.';\n      }\n\n      const data = await response.json();\n      return data.llm_response || '추천 이유 없음';\n    } catch (error) {\n      console.error(`추천 이유 요청 중 오류 발생: ${error}`);\n      return '추천 이유를 가져올 수 없습니다.';\n    }\n  };\n\n  useEffect(() => {\n    const fetchNicknameAndRecommendations = async () => {\n      const accessToken = localStorage.getItem('token'); // 토큰 받아오기\n\n      if (!userId || !accessToken) {\n        setError('로그인이 필요합니다.');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // 닉네임 가져오기\n        const nicknameResponse = await fetch(`/member/user/${userId}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n\n        if (!nicknameResponse.ok) {\n          const errorMessage = await nicknameResponse.text();\n          throw new Error(`닉네임 요청 실패: ${errorMessage}`);\n        }\n\n        const nicknameData = await nicknameResponse.json();\n        setNickname(nicknameData.member?.nickname || '');\n\n        // 추천 영화 가져오기\n        const recommendationsResponse = await fetch(`/api/ai/predict/${userId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n\n        if (!recommendationsResponse.ok) {\n          const errorMessage = await recommendationsResponse.text();\n          throw new Error(`추천 요청 실패: ${errorMessage}`);\n        }\n\n        const recommendationsData = await recommendationsResponse.json();\n\n        // movieCd 기반 상세 영화 데이터와 추천 이유 가져오기\n        const movies = await Promise.all(\n          recommendationsData.map(async (movie) => {\n            try {\n              const detailResponse = await fetch(\n                `/api/movies/detail/${movie.movieCd}?language=ko`,\n                {\n                  headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                  },\n                }\n              );\n\n              if (!detailResponse.ok) {\n                console.error(`영화 상세 정보 요청 실패: ${movie.movieCd}`);\n                return null;\n              }\n\n              const detailData = await detailResponse.json();\n\n              const reason = await fetchRecommendationReason(movie.movieCd); // 추천 이유 가져오기\n\n              return {\n                id: movie.movieCd,\n                title: detailData.title,\n                posterPath: detailData.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${detailData.poster_path}`\n                  : null,\n                reason,\n              };\n            } catch (error) {\n              console.error(`영화 상세 정보 요청 중 오류 발생: ${movie.movieCd}`, error);\n              return null;\n            }\n          })\n        );\n\n        setRecommendations(movies.filter((movie) => movie !== null)); // 유효한 데이터만 추가\n      } catch (error) {\n        console.error('Error:', error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchNicknameAndRecommendations();\n  }, [userId]);\n\n  const handleMovieClick = (movieId) => {\n    navigate(`/api/movies/detail/${movieId}?language=ko`);\n  };\n\n  const [expanded, setExpanded] = useState({}); // 추천 이유 펼치기 상태 관리\n\n  const toggleExpand = (id) => {\n    setExpanded((prev) => ({\n      ...prev,\n      [id]: !prev[id],\n    }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"recommend-page\">\n        <Navbar />\n        <div className=\"recommend-content\">\n          <p>데이터를 불러오는 중입니다...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"recommend-page\">\n      <Navbar />\n      <div className=\"recommend-content\">\n        <h2>{nickname} 님을 위한 추천 영화는?</h2>\n        {error ? (\n          <p className=\"error-message\">{error}</p>\n        ) : (\n          <div className=\"movie-list\">\n            {recommendations.map((movie) => (\n              <div className=\"movie-item\" key={movie.id}>\n                <div onClick={() => handleMovieClick(movie.id)}> {/* 영화 상세 이동 */}\n                  {movie.posterPath ? (\n                    <img\n                      src={movie.posterPath}\n                      alt={movie.title}\n                      className=\"movie-poster\"\n                    />\n                  ) : (\n                    <div className=\"no-poster\">포스터 없음</div>\n                  )}\n                  <h3 className=\"movie-title\">{movie.title}</h3>\n                </div>\n\n                {/* 추천 이유 */}\n                <div className=\"movie-reason\">\n                  {expanded[movie.id] ? (\n                    <>\n                      <p>{movie.reason}</p>\n                      <button onClick={() => toggleExpand(movie.id)}>\n                        접기\n                      </button>\n                    </>\n                  ) : (\n                    <>\n                      <p>\n                        {movie.reason.slice(0, 100)}\n                        {movie.reason.length > 100 ? '...' : ''}\n                      </p>\n                      {movie.reason.length > 100 && (\n                        <button onClick={() => toggleExpand(movie.id)}>\n                          자세히 보기\n                        </button>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 챗봇 버튼 */}\n      <button\n        className=\"chatbot-button\"\n        aria-label=\"챗봇 열기\"\n        onClick={() => setChatOpen(!chatOpen)}\n      >\n        💬\n      </button>\n\n      {/* Chatbot 컴포넌트 */}\n      <Chatbot isOpen={chatOpen} onClose={() => setChatOpen(false)} />\n    </div>\n  );\n};\n\nexport default RecommendPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}