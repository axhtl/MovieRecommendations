{"ast":null,"code":"import React,{useEffect,useState}from'react';import{tmdbApiClient}from'../../api/tmdb';import'../styles/UpcomingMovies.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const UpcomingMovies=()=>{const[upcomingMovies,setUpcomingMovies]=useState([]);const[error,setError]=useState(null);useEffect(()=>{const fetchUpcomingMovies=async()=>{try{const response=await tmdbApiClient.get('/movie/upcoming',{params:{language:'ko-KR',region:'KR'}});setUpcomingMovies(response.data.results.slice(0,3));// 상위 2개 영화만 저장\n}catch(err){console.error('개봉 예정 영화 데이터를 가져오는 중 오류 발생:',err);setError('영화를 불러오는 중 오류가 발생했습니다.');}};fetchUpcomingMovies();},[]);if(error)return/*#__PURE__*/_jsx(\"p\",{children:error});if(!upcomingMovies.length)return/*#__PURE__*/_jsx(\"p\",{children:\"\\uB85C\\uB529 \\uC911...\"});return/*#__PURE__*/_jsxs(\"div\",{className:\"upcoming-movies\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uAC1C\\uBD09 \\uC608\\uC815 \\uC601\\uD654\"}),/*#__PURE__*/_jsx(\"div\",{className:\"movie-list\",children:upcomingMovies.map(movie=>/*#__PURE__*/_jsxs(\"div\",{className:\"movie-card\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"https://image.tmdb.org/t/p/w300\".concat(movie.poster_path),alt:movie.title,className:\"movie-poster\"}),/*#__PURE__*/_jsx(\"p\",{className:\"movie-title\",children:movie.title}),/*#__PURE__*/_jsxs(\"p\",{className:\"movie-release-date\",children:[\"\\uAC1C\\uBD09\\uC77C: \",movie.release_date]})]},movie.id))})]});};export default UpcomingMovies;","map":{"version":3,"names":["React","useEffect","useState","tmdbApiClient","jsx","_jsx","jsxs","_jsxs","UpcomingMovies","upcomingMovies","setUpcomingMovies","error","setError","fetchUpcomingMovies","response","get","params","language","region","data","results","slice","err","console","children","length","className","map","movie","src","concat","poster_path","alt","title","release_date","id"],"sources":["C:/Users/MovieRecommendations/frontend/src/components/list/UpcomingMovies.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { tmdbApiClient } from '../../api/tmdb';\r\nimport '../styles/UpcomingMovies.css';\r\n\r\nconst UpcomingMovies = () => {\r\n  const [upcomingMovies, setUpcomingMovies] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchUpcomingMovies = async () => {\r\n      try {\r\n        const response = await tmdbApiClient.get('/movie/upcoming', {\r\n          params: {\r\n            language: 'ko-KR',\r\n            region: 'KR',\r\n          },\r\n        });\r\n        setUpcomingMovies(response.data.results.slice(0, 3)); // 상위 2개 영화만 저장\r\n      } catch (err) {\r\n        console.error('개봉 예정 영화 데이터를 가져오는 중 오류 발생:', err);\r\n        setError('영화를 불러오는 중 오류가 발생했습니다.');\r\n      }\r\n    };\r\n\r\n    fetchUpcomingMovies();\r\n  }, []);\r\n\r\n  if (error) return <p>{error}</p>;\r\n  if (!upcomingMovies.length) return <p>로딩 중...</p>;\r\n\r\n  return (\r\n    <div className=\"upcoming-movies\">\r\n      <h2>개봉 예정 영화</h2>\r\n      <div className=\"movie-list\">\r\n        {upcomingMovies.map((movie) => (\r\n          <div className=\"movie-card\" key={movie.id}>\r\n            <img\r\n              src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\r\n              alt={movie.title}\r\n              className=\"movie-poster\"\r\n            />\r\n            <p className=\"movie-title\">{movie.title}</p>\r\n            <p className=\"movie-release-date\">개봉일: {movie.release_date}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpcomingMovies;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,aAAa,KAAQ,gBAAgB,CAC9C,MAAO,8BAA8B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEtC,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAACS,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAGxCD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAY,mBAAmB,CAAG,KAAAA,CAAA,GAAY,CACtC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAX,aAAa,CAACY,GAAG,CAAC,iBAAiB,CAAE,CAC1DC,MAAM,CAAE,CACNC,QAAQ,CAAE,OAAO,CACjBC,MAAM,CAAE,IACV,CACF,CAAC,CAAC,CACFR,iBAAiB,CAACI,QAAQ,CAACK,IAAI,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAE;AACxD,CAAE,MAAOC,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,6BAA6B,CAAEW,GAAG,CAAC,CACjDV,QAAQ,CAAC,wBAAwB,CAAC,CACpC,CACF,CAAC,CAEDC,mBAAmB,CAAC,CAAC,CACvB,CAAC,CAAE,EAAE,CAAC,CAEN,GAAIF,KAAK,CAAE,mBAAON,IAAA,MAAAmB,QAAA,CAAIb,KAAK,CAAI,CAAC,CAChC,GAAI,CAACF,cAAc,CAACgB,MAAM,CAAE,mBAAOpB,IAAA,MAAAmB,QAAA,CAAG,wBAAO,CAAG,CAAC,CAEjD,mBACEjB,KAAA,QAAKmB,SAAS,CAAC,iBAAiB,CAAAF,QAAA,eAC9BnB,IAAA,OAAAmB,QAAA,CAAI,wCAAQ,CAAI,CAAC,cACjBnB,IAAA,QAAKqB,SAAS,CAAC,YAAY,CAAAF,QAAA,CACxBf,cAAc,CAACkB,GAAG,CAAEC,KAAK,eACxBrB,KAAA,QAAKmB,SAAS,CAAC,YAAY,CAAAF,QAAA,eACzBnB,IAAA,QACEwB,GAAG,mCAAAC,MAAA,CAAoCF,KAAK,CAACG,WAAW,CAAG,CAC3DC,GAAG,CAAEJ,KAAK,CAACK,KAAM,CACjBP,SAAS,CAAC,cAAc,CACzB,CAAC,cACFrB,IAAA,MAAGqB,SAAS,CAAC,aAAa,CAAAF,QAAA,CAAEI,KAAK,CAACK,KAAK,CAAI,CAAC,cAC5C1B,KAAA,MAAGmB,SAAS,CAAC,oBAAoB,CAAAF,QAAA,EAAC,sBAAK,CAACI,KAAK,CAACM,YAAY,EAAI,CAAC,GAPhCN,KAAK,CAACO,EAQlC,CACN,CAAC,CACC,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAA3B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}