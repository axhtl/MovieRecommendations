{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useParams,useNavigate}from'react-router-dom';import Navbar from'../ui/Navbar';import Chatbot from'../list/Chatbot';// 새롭게 만든 Chatbot 컴포넌트\nimport'../styles/RecommendPage.css';import'../styles/Chatbot.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const RecommendPage=()=>{const{userId}=useParams();const navigate=useNavigate();const[recommendations,setRecommendations]=useState([]);const[nickname,setNickname]=useState('');const[error,setError]=useState(null);const[loading,setLoading]=useState(true);// 채팅창 상태\nconst[chatOpen,setChatOpen]=useState(false);useEffect(()=>{const fetchNicknameAndRecommendations=async()=>{const accessToken=localStorage.getItem('token');// 토큰 받아오기\nif(!userId||!accessToken){setError('로그인이 필요합니다.');setLoading(false);return;}try{var _nicknameData$member;// 닉네임 가져오기\nconst nicknameResponse=await fetch(\"/member/user/\".concat(userId),{headers:{Authorization:\"Bearer \".concat(accessToken)// 토큰 추가\n}});if(!nicknameResponse.ok){const errorMessage=await nicknameResponse.text();throw new Error(\"\\uB2C9\\uB124\\uC784 \\uC694\\uCCAD \\uC2E4\\uD328: \".concat(errorMessage));}const nicknameData=await nicknameResponse.json();setNickname(((_nicknameData$member=nicknameData.member)===null||_nicknameData$member===void 0?void 0:_nicknameData$member.nickname)||'');// 추천 영화 가져오기\nconst recommendationsResponse=await fetch(\"/api/ai/predict/\".concat(userId),{method:'POST',headers:{'Content-Type':'application/json',Authorization:\"Bearer \".concat(accessToken)// 토큰 추가\n}});if(!recommendationsResponse.ok){const errorMessage=await recommendationsResponse.text();throw new Error(\"\\uCD94\\uCC9C \\uC694\\uCCAD \\uC2E4\\uD328: \".concat(errorMessage));}const recommendationsData=await recommendationsResponse.json();// movieCd 기반 상세 영화 데이터 가져오기\nconst movies=await Promise.all(recommendationsData.map(async movie=>{try{const detailResponse=await fetch(\"/api/movies/detail/\".concat(movie.movieCd,\"?language=ko\"),{headers:{Authorization:\"Bearer \".concat(accessToken)// 토큰 추가\n}});if(!detailResponse.ok){console.error(\"\\uC601\\uD654 \\uC0C1\\uC138 \\uC815\\uBCF4 \\uC694\\uCCAD \\uC2E4\\uD328: \".concat(movie.movieCd));return null;}const detailData=await detailResponse.json();return{id:movie.movieCd,title:detailData.title,posterPath:detailData.poster_path?\"https://image.tmdb.org/t/p/w500\".concat(detailData.poster_path):null};}catch(error){console.error(\"\\uC601\\uD654 \\uC0C1\\uC138 \\uC815\\uBCF4 \\uC694\\uCCAD \\uC911 \\uC624\\uB958 \\uBC1C\\uC0DD: \".concat(movie.movieCd),error);return null;}}));setRecommendations(movies.filter(movie=>movie!==null));// 유효한 데이터만 추가\n}catch(error){console.error('Error:',error.message);setError(error.message);}finally{setLoading(false);}};fetchNicknameAndRecommendations();},[userId]);const handleMovieClick=movieId=>{navigate(\"/api/movies/detail/\".concat(movieId,\"?language=ko\"));};if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:\"recommend-page\",children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsx(\"div\",{className:\"recommend-content\",children:/*#__PURE__*/_jsx(\"p\",{children:\"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"})})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"recommend-page\",children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"recommend-content\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[nickname,\" \\uB2D8\\uC744 \\uC704\\uD55C \\uCD94\\uCC9C \\uC601\\uD654\\uB294?\"]}),error?/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error}):/*#__PURE__*/_jsx(\"div\",{className:\"movie-list\",children:recommendations.map(movie=>/*#__PURE__*/_jsxs(\"div\",{className:\"movie-item\",onClick:()=>handleMovieClick(movie.id)// 클릭 이벤트 추가\n,children:[movie.posterPath?/*#__PURE__*/_jsx(\"img\",{src:movie.posterPath,alt:movie.title,className:\"movie-poster\"}):/*#__PURE__*/_jsx(\"div\",{className:\"no-poster\",children:\"\\uD3EC\\uC2A4\\uD130 \\uC5C6\\uC74C\"}),/*#__PURE__*/_jsx(\"h3\",{className:\"movie-title\",children:movie.title})]},movie.id))})]}),/*#__PURE__*/_jsx(\"button\",{className:\"chatbot-button\",\"aria-label\":\"\\uCC57\\uBD07 \\uC5F4\\uAE30\",onClick:()=>setChatOpen(!chatOpen),children:\"\\uD83D\\uDCAC\"}),/*#__PURE__*/_jsx(Chatbot,{isOpen:chatOpen,onClose:()=>setChatOpen(false)})]});};export default RecommendPage;","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Navbar","Chatbot","jsx","_jsx","jsxs","_jsxs","RecommendPage","userId","navigate","recommendations","setRecommendations","nickname","setNickname","error","setError","loading","setLoading","chatOpen","setChatOpen","fetchNicknameAndRecommendations","accessToken","localStorage","getItem","_nicknameData$member","nicknameResponse","fetch","concat","headers","Authorization","ok","errorMessage","text","Error","nicknameData","json","member","recommendationsResponse","method","recommendationsData","movies","Promise","all","map","movie","detailResponse","movieCd","console","detailData","id","title","posterPath","poster_path","filter","message","handleMovieClick","movieId","className","children","onClick","src","alt","isOpen","onClose"],"sources":["C:/Users/MovieRecommendations/frontend/src/components/page/RecommendPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Navbar from '../ui/Navbar';\nimport Chatbot from '../list/Chatbot'; // 새롭게 만든 Chatbot 컴포넌트\nimport '../styles/RecommendPage.css';\nimport '../styles/Chatbot.css';\n\nconst RecommendPage = () => {\n  const { userId } = useParams();\n  const navigate = useNavigate();\n  const [recommendations, setRecommendations] = useState([]);\n  const [nickname, setNickname] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 채팅창 상태\n  const [chatOpen, setChatOpen] = useState(false);\n\n  useEffect(() => {\n    const fetchNicknameAndRecommendations = async () => {\n      const accessToken = localStorage.getItem('token'); // 토큰 받아오기\n\n      if (!userId || !accessToken) {\n        setError('로그인이 필요합니다.');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // 닉네임 가져오기\n        const nicknameResponse = await fetch(`/member/user/${userId}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`, // 토큰 추가\n          },\n        });\n\n        if (!nicknameResponse.ok) {\n          const errorMessage = await nicknameResponse.text();\n          throw new Error(`닉네임 요청 실패: ${errorMessage}`);\n        }\n\n        const nicknameData = await nicknameResponse.json();\n        setNickname(nicknameData.member?.nickname || '');\n\n        // 추천 영화 가져오기\n        const recommendationsResponse = await fetch(`/api/ai/predict/${userId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}`, // 토큰 추가\n          },\n        });\n\n        if (!recommendationsResponse.ok) {\n          const errorMessage = await recommendationsResponse.text();\n          throw new Error(`추천 요청 실패: ${errorMessage}`);\n        }\n\n        const recommendationsData = await recommendationsResponse.json();\n\n        // movieCd 기반 상세 영화 데이터 가져오기\n        const movies = await Promise.all(\n          recommendationsData.map(async (movie) => {\n            try {\n              const detailResponse = await fetch(\n                `/api/movies/detail/${movie.movieCd}?language=ko`,\n                {\n                  headers: {\n                    Authorization: `Bearer ${accessToken}`, // 토큰 추가\n                  },\n                }\n              );\n\n              if (!detailResponse.ok) {\n                console.error(`영화 상세 정보 요청 실패: ${movie.movieCd}`);\n                return null;\n              }\n\n              const detailData = await detailResponse.json();\n              return {\n                id: movie.movieCd,\n                title: detailData.title,\n                posterPath: detailData.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${detailData.poster_path}`\n                  : null,\n              };\n            } catch (error) {\n              console.error(`영화 상세 정보 요청 중 오류 발생: ${movie.movieCd}`, error);\n              return null;\n            }\n          })\n        );\n\n        setRecommendations(movies.filter((movie) => movie !== null)); // 유효한 데이터만 추가\n      } catch (error) {\n        console.error('Error:', error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchNicknameAndRecommendations();\n  }, [userId]);\n\n  const handleMovieClick = (movieId) => {\n    navigate(`/api/movies/detail/${movieId}?language=ko`);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"recommend-page\">\n        <Navbar />\n        <div className=\"recommend-content\">\n          <p>데이터를 불러오는 중입니다...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"recommend-page\">\n      <Navbar />\n      <div className=\"recommend-content\">\n        <h2>{nickname} 님을 위한 추천 영화는?</h2>\n        {error ? (\n          <p className=\"error-message\">{error}</p>\n        ) : (\n          <div className=\"movie-list\">\n            {recommendations.map((movie) => (\n              <div\n                className=\"movie-item\"\n                key={movie.id}\n                onClick={() => handleMovieClick(movie.id)} // 클릭 이벤트 추가\n              >\n                {movie.posterPath ? (\n                  <img\n                    src={movie.posterPath}\n                    alt={movie.title}\n                    className=\"movie-poster\"\n                  />\n                ) : (\n                  <div className=\"no-poster\">포스터 없음</div>\n                )}\n                <h3 className=\"movie-title\">{movie.title}</h3>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 챗봇 버튼 */}\n      <button\n        className=\"chatbot-button\"\n        aria-label=\"챗봇 열기\"\n        onClick={() => setChatOpen(!chatOpen)}\n      >\n        💬\n      </button>\n\n      {/* Chatbot 컴포넌트 */}\n      <Chatbot isOpen={chatOpen} onClose={() => setChatOpen(false)} />\n    </div>\n  );\n};\n\nexport default RecommendPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}