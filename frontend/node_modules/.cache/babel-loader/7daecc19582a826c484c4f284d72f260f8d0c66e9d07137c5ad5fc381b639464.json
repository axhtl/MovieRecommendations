{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from'react-router-dom';import'../styles/RegisterPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const RegisterPage=()=>{const[nickname,setNickname]=useState('');const[membername,setMembername]=useState('');const[password,setPassword]=useState('');const[confirmPassword,setConfirmPassword]=useState('');const navigate=useNavigate();const handleRegister=async e=>{e.preventDefault();// 유효성 검사: 모든 필드가 입력되었는지 확인\nif(!nickname||!membername||!password||!confirmPassword){alert('모든 필드를 입력해 주세요.');return;}// 비밀번호 확인\nif(password!==confirmPassword){alert('비밀번호가 일치하지 않습니다.');return;}// 회원가입 데이터\nconst data={membername:membername,password:password,nickname:nickname};try{// 회원가입 요청\nconst response=await fetch('/member/signup',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(response.ok){const result=await response.json();// 서버 응답\nconsole.log('회원가입 성공:',result);// 응답 확인\nconst memberId=result.id;// 백엔드 응답에서 memberId 추출\nif(!memberId){console.error(\"Member ID is missing in the response.\");alert(\"회원가입이 완료되었지만 회원 정보를 불러오는데 실패했습니다. 다시 시도해 주세요.\");return;}// 성공 메시지와 페이지 이동\nalert('회원가입이 성공적으로 완료되었습니다!');navigate(\"/survey?userId=\".concat(memberId));}else{// 실패 시 처리\nconst errorResult=await response.json();console.error('회원가입 실패:',errorResult.message||'Unknown error');alert(\"\\uD68C\\uC6D0\\uAC00\\uC785\\uC5D0 \\uC2E4\\uD328\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uC624\\uB958: \".concat(errorResult.message||'다시 시도해 주세요.'));}}catch(error){// 네트워크 또는 서버 오류 처리\nconsole.error('서버와의 연결에 문제가 발생했습니다:',error);alert('오류가 발생했습니다. 잠시 후 다시 시도해 주세요.');}};return/*#__PURE__*/_jsx(\"div\",{className:\"register-page\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleRegister,className:\"register-form\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\uB2C9\\uB124\\uC784\",value:nickname,onChange:e=>setNickname(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",placeholder:\"\\uC544\\uC774\\uB514 (\\uC774\\uBA54\\uC77C)\",value:membername,onChange:e=>setMembername(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\",value:password,onChange:e=>setPassword(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",value:confirmPassword,onChange:e=>setConfirmPassword(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"})]})});};export default RegisterPage;","map":{"version":3,"names":["React","useState","useNavigate","jsx","_jsx","jsxs","_jsxs","RegisterPage","nickname","setNickname","membername","setMembername","password","setPassword","confirmPassword","setConfirmPassword","navigate","handleRegister","e","preventDefault","alert","data","response","fetch","method","headers","body","JSON","stringify","ok","result","json","console","log","memberId","id","error","concat","errorResult","message","className","children","onSubmit","type","placeholder","value","onChange","target"],"sources":["C:/Users/MovieRecommendations/frontend/src/components/page/RegisterPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/RegisterPage.css';\n\nconst RegisterPage = () => {\n    const [nickname, setNickname] = useState('');\n    const [membername, setMembername] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const navigate = useNavigate();\n\n    const handleRegister = async (e) => {\n        e.preventDefault();\n\n        // 유효성 검사: 모든 필드가 입력되었는지 확인\n        if (!nickname || !membername || !password || !confirmPassword) {\n            alert('모든 필드를 입력해 주세요.');\n            return;\n        }\n\n        // 비밀번호 확인\n        if (password !== confirmPassword) {\n            alert('비밀번호가 일치하지 않습니다.');\n            return;\n        }\n\n        // 회원가입 데이터\n        const data = {\n            membername: membername,\n            password: password,\n            nickname: nickname,\n        };\n\n        try {\n            // 회원가입 요청\n            const response = await fetch('/member/signup', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            });\n\n            if (response.ok) {\n                const result = await response.json(); // 서버 응답\n                console.log('회원가입 성공:', result); // 응답 확인\n                const memberId = result.id; // 백엔드 응답에서 memberId 추출\n\n                if (!memberId) {\n                    console.error(\"Member ID is missing in the response.\");\n                    alert(\"회원가입이 완료되었지만 회원 정보를 불러오는데 실패했습니다. 다시 시도해 주세요.\");\n                    return;\n                }\n\n                // 성공 메시지와 페이지 이동\n                alert('회원가입이 성공적으로 완료되었습니다!');\n                navigate(`/survey?userId=${memberId}`);            } else {\n                // 실패 시 처리\n                const errorResult = await response.json();\n                console.error('회원가입 실패:', errorResult.message || 'Unknown error');\n                alert(`회원가입에 실패했습니다. 오류: ${errorResult.message || '다시 시도해 주세요.'}`);\n            }\n        } catch (error) {\n            // 네트워크 또는 서버 오류 처리\n            console.error('서버와의 연결에 문제가 발생했습니다:', error);\n            alert('오류가 발생했습니다. 잠시 후 다시 시도해 주세요.');\n        }\n    };\n\n    return (\n        <div className=\"register-page\">\n            <form onSubmit={handleRegister} className=\"register-form\">\n                <h2>회원가입</h2>\n                <input\n                    type=\"text\"\n                    placeholder=\"닉네임\"\n                    value={nickname}\n                    onChange={(e) => setNickname(e.target.value)}\n                />\n                <input\n                    type=\"email\"\n                    placeholder=\"아이디 (이메일)\"\n                    value={membername}\n                    onChange={(e) => setMembername(e.target.value)}\n                />\n                <input\n                    type=\"password\"\n                    placeholder=\"비밀번호\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                />\n                <input\n                    type=\"password\"\n                    placeholder=\"비밀번호 확인\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                />\n                <button type=\"submit\">회원가입</button>\n            </form>\n        </div>\n    );\n};\n\nexport default RegisterPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}