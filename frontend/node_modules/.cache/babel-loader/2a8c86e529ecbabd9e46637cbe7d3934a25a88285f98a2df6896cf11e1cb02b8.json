{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MovieRecommendations\\\\frontend\\\\src\\\\components\\\\list\\\\MemberInfoEdit.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport '../styles/Edit.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Edit = () => {\n  _s();\n  const {\n    memberId\n  } = useParams(); // URL에서 memberId 가져오기\n  const [actorList, setActorList] = useState([]);\n  const [newActor, setNewActor] = useState('');\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await fetch(`/member/user/${memberId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setActorList(data.preferredActors || []); // 서버에서 actorList 받아옴\n        } else {\n          alert('사용자 데이터를 불러오는 데 실패했습니다.');\n        }\n      } catch (error) {\n        console.error('데이터 로드 오류:', error);\n        alert('사용자 데이터를 불러오는 중 오류가 발생했습니다.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserData();\n  }, [memberId]);\n\n  // 배우 추가\n  const handleAddActor = async () => {\n    if (!newActor.trim()) {\n      alert('배우 이름을 입력하세요.');\n      return;\n    }\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/survey/${memberId}/actor`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(newActor)\n      });\n      if (response.ok) {\n        const actorId = await response.text(); // 서버에서 추가된 actorId 반환\n        setActorList([...actorList, {\n          id: actorId,\n          name: newActor\n        }]);\n        setNewActor(''); // 입력 필드 초기화\n        alert('배우가 성공적으로 추가되었습니다.');\n      } else {\n        alert('배우 추가에 실패했습니다. 다시 시도해주세요.');\n      }\n    } catch (error) {\n      console.error('배우 추가 중 오류 발생:', error);\n      alert('오류가 발생했습니다. 잠시 후 다시 시도해주세요.');\n    }\n  };\n\n  // 배우 삭제\n  const handleRemoveActor = async preferredActorId => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/survey/preferred-actors/${preferredActorId}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        setActorList(actorList.filter(actor => actor.id !== preferredActorId));\n        alert('배우가 성공적으로 삭제되었습니다.');\n      } else {\n        alert('배우 삭제에 실패했습니다. 다시 시도해주세요.');\n      }\n    } catch (error) {\n      console.error('배우 삭제 중 오류 발생:', error);\n      alert('오류가 발생했습니다. 잠시 후 다시 시도해주세요.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"edit-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC88B\\uC544\\uD558\\uB294 \\uBC30\\uC6B0 \\uAD00\\uB9AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uC88B\\uC544\\uD558\\uB294 \\uBC30\\uC6B0 \\uCD94\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actor-input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newActor,\n          onChange: e => setNewActor(e.target.value),\n          placeholder: \"\\uBC30\\uC6B0 \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleAddActor,\n          children: \"\\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actor-list\",\n      children: actorList.map(actor => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actor-item\",\n        children: [actor.name, /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => handleRemoveActor(actor.id),\n          children: \"\\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, actor.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"save-button\",\n      onClick: () => navigate(-1) // 이전 페이지로 이동\n      ,\n      children: \"\\uB3CC\\uC544\\uAC00\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Edit, \"HDUrU5ZBRrHAT82AFQIEHCTvW1A=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Edit;\nexport default Edit;\nvar _c;\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsxDEV","_jsxDEV","Edit","_s","memberId","actorList","setActorList","newActor","setNewActor","loading","setLoading","navigate","fetchUserData","token","localStorage","getItem","response","fetch","headers","Authorization","ok","data","json","preferredActors","alert","error","console","handleAddActor","trim","method","body","JSON","stringify","actorId","text","id","name","handleRemoveActor","preferredActorId","filter","actor","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","value","onChange","e","target","placeholder","onClick","map","_c","$RefreshReg$"],"sources":["C:/Users/MovieRecommendations/frontend/src/components/list/MemberInfoEdit.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport '../styles/Edit.css';\r\n\r\nconst Edit = () => {\r\n  const { memberId } = useParams(); // URL에서 memberId 가져오기\r\n  const [actorList, setActorList] = useState([]);\r\n  const [newActor, setNewActor] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await fetch(`/member/user/${memberId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setActorList(data.preferredActors || []); // 서버에서 actorList 받아옴\r\n        } else {\r\n          alert('사용자 데이터를 불러오는 데 실패했습니다.');\r\n        }\r\n      } catch (error) {\r\n        console.error('데이터 로드 오류:', error);\r\n        alert('사용자 데이터를 불러오는 중 오류가 발생했습니다.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, [memberId]);\r\n\r\n  // 배우 추가\r\n  const handleAddActor = async () => {\r\n    if (!newActor.trim()) {\r\n      alert('배우 이름을 입력하세요.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`/survey/${memberId}/actor`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(newActor),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const actorId = await response.text(); // 서버에서 추가된 actorId 반환\r\n        setActorList([...actorList, { id: actorId, name: newActor }]);\r\n        setNewActor(''); // 입력 필드 초기화\r\n        alert('배우가 성공적으로 추가되었습니다.');\r\n      } else {\r\n        alert('배우 추가에 실패했습니다. 다시 시도해주세요.');\r\n      }\r\n    } catch (error) {\r\n      console.error('배우 추가 중 오류 발생:', error);\r\n      alert('오류가 발생했습니다. 잠시 후 다시 시도해주세요.');\r\n    }\r\n  };\r\n\r\n  // 배우 삭제\r\n  const handleRemoveActor = async (preferredActorId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(`/survey/preferred-actors/${preferredActorId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        setActorList(actorList.filter((actor) => actor.id !== preferredActorId));\r\n        alert('배우가 성공적으로 삭제되었습니다.');\r\n      } else {\r\n        alert('배우 삭제에 실패했습니다. 다시 시도해주세요.');\r\n      }\r\n    } catch (error) {\r\n      console.error('배우 삭제 중 오류 발생:', error);\r\n      alert('오류가 발생했습니다. 잠시 후 다시 시도해주세요.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>로딩 중...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"edit-page\">\r\n      <h2>좋아하는 배우 관리</h2>\r\n\r\n      {/* 배우 추가 */}\r\n      <div className=\"form-group\">\r\n        <label>좋아하는 배우 추가</label>\r\n        <div className=\"actor-input-group\">\r\n          <input\r\n            type=\"text\"\r\n            value={newActor}\r\n            onChange={(e) => setNewActor(e.target.value)}\r\n            placeholder=\"배우 이름을 입력하세요\"\r\n          />\r\n          <button type=\"button\" onClick={handleAddActor}>추가</button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 배우 목록 및 삭제 */}\r\n      <div className=\"actor-list\">\r\n        {actorList.map((actor) => (\r\n          <div key={actor.id} className=\"actor-item\">\r\n            {actor.name}\r\n            <button type=\"button\" onClick={() => handleRemoveActor(actor.id)}>삭제</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* 돌아가기 버튼 */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"save-button\"\r\n        onClick={() => navigate(-1)} // 이전 페이지로 이동\r\n      >\r\n        돌아가기\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Edit;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}