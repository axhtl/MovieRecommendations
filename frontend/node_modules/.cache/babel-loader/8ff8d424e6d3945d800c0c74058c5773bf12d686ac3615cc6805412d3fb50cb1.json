{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MovieRecommendations\\\\frontend\\\\src\\\\components\\\\page\\\\RecommendPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Navbar from '../ui/Navbar';\nimport Chatbot from '../list/Chatbot'; // 새롭게 만든 Chatbot 컴포넌트\nimport '../styles/RecommendPage.css';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecommendPage = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const navigate = useNavigate();\n  const [recommendations, setRecommendations] = useState([]);\n  const [nickname, setNickname] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 채팅창 상태\n  const [chatOpen, setChatOpen] = useState(false);\n  useEffect(() => {\n    const fetchNicknameAndRecommendations = async () => {\n      const accessToken = localStorage.getItem('token'); // 토큰 받아오기\n\n      if (!userId || !accessToken) {\n        setError('로그인이 필요합니다.');\n        setLoading(false);\n        return;\n      }\n      try {\n        var _nicknameData$member;\n        // 닉네임 가져오기\n        const nicknameResponse = await fetch(`/member/user/${userId}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}` // 토큰 추가\n          }\n        });\n        if (!nicknameResponse.ok) {\n          const errorMessage = await nicknameResponse.text();\n          throw new Error(`닉네임 요청 실패: ${errorMessage}`);\n        }\n        const nicknameData = await nicknameResponse.json();\n        setNickname(((_nicknameData$member = nicknameData.member) === null || _nicknameData$member === void 0 ? void 0 : _nicknameData$member.nickname) || '');\n\n        // 추천 영화 가져오기\n        const recommendationsResponse = await fetch(`/api/ai/predict/${userId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}` // 토큰 추가\n          }\n        });\n        if (!recommendationsResponse.ok) {\n          const errorMessage = await recommendationsResponse.text();\n          throw new Error(`추천 요청 실패: ${errorMessage}`);\n        }\n        const recommendationsData = await recommendationsResponse.json();\n\n        // movieCd 기반 상세 영화 데이터 가져오기\n        const movies = await Promise.all(recommendationsData.map(async movie => {\n          try {\n            const detailResponse = await fetch(`/api/movies/detail/${movie.movieCd}?language=ko`, {\n              headers: {\n                Authorization: `Bearer ${accessToken}` // 토큰 추가\n              }\n            });\n            if (!detailResponse.ok) {\n              console.error(`영화 상세 정보 요청 실패: ${movie.movieCd}`);\n              return null;\n            }\n            const detailData = await detailResponse.json();\n            return {\n              id: movie.movieCd,\n              title: detailData.title,\n              posterPath: detailData.poster_path ? `https://image.tmdb.org/t/p/w500${detailData.poster_path}` : null\n            };\n          } catch (error) {\n            console.error(`영화 상세 정보 요청 중 오류 발생: ${movie.movieCd}`, error);\n            return null;\n          }\n        }));\n        setRecommendations(movies.filter(movie => movie !== null)); // 유효한 데이터만 추가\n      } catch (error) {\n        console.error('Error:', error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchNicknameAndRecommendations();\n  }, [userId]);\n  const handleMovieClick = movieId => {\n    navigate(`/api/movies/detail/${movieId}?language=ko`);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommend-page\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recommend-content\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recommend-page\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommend-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [nickname, \" \\uB2D8\\uC744 \\uC704\\uD55C \\uCD94\\uCC9C \\uC601\\uD654\\uB294?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-list\",\n        children: recommendations.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-item\",\n          onClick: () => handleMovieClick(movie.id) // 클릭 이벤트 추가\n          ,\n          children: [movie.posterPath ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: movie.posterPath,\n            alt: movie.title,\n            className: \"movie-poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-poster\",\n            children: \"\\uD3EC\\uC2A4\\uD130 \\uC5C6\\uC74C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"movie-title\",\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this)]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-button\",\n      \"aria-label\": \"\\uCC57\\uBD07 \\uC5F4\\uAE30\",\n      onClick: () => setChatOpen(!chatOpen),\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chatbot, {\n      isOpen: chatOpen,\n      onClose: () => setChatOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(RecommendPage, \"slOTwupOpZk3YyD8cZgAqh08l1A=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = RecommendPage;\nexport default RecommendPage;\nvar _c;\n$RefreshReg$(_c, \"RecommendPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Navbar","Chatbot","jsxDEV","_jsxDEV","RecommendPage","_s","userId","navigate","recommendations","setRecommendations","nickname","setNickname","error","setError","loading","setLoading","chatOpen","setChatOpen","fetchNicknameAndRecommendations","accessToken","localStorage","getItem","_nicknameData$member","nicknameResponse","fetch","headers","Authorization","ok","errorMessage","text","Error","nicknameData","json","member","recommendationsResponse","method","recommendationsData","movies","Promise","all","map","movie","detailResponse","movieCd","console","detailData","id","title","posterPath","poster_path","filter","message","handleMovieClick","movieId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","isOpen","onClose","_c","$RefreshReg$"],"sources":["C:/Users/MovieRecommendations/frontend/src/components/page/RecommendPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Navbar from '../ui/Navbar';\nimport Chatbot from '../list/Chatbot'; // 새롭게 만든 Chatbot 컴포넌트\nimport '../styles/RecommendPage.css';\nimport '../styles/Chatbot.css';\n\nconst RecommendPage = () => {\n  const { userId } = useParams();\n  const navigate = useNavigate();\n  const [recommendations, setRecommendations] = useState([]);\n  const [nickname, setNickname] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 채팅창 상태\n  const [chatOpen, setChatOpen] = useState(false);\n\n  useEffect(() => {\n    const fetchNicknameAndRecommendations = async () => {\n      const accessToken = localStorage.getItem('token'); // 토큰 받아오기\n\n      if (!userId || !accessToken) {\n        setError('로그인이 필요합니다.');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // 닉네임 가져오기\n        const nicknameResponse = await fetch(`/member/user/${userId}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`, // 토큰 추가\n          },\n        });\n\n        if (!nicknameResponse.ok) {\n          const errorMessage = await nicknameResponse.text();\n          throw new Error(`닉네임 요청 실패: ${errorMessage}`);\n        }\n\n        const nicknameData = await nicknameResponse.json();\n        setNickname(nicknameData.member?.nickname || '');\n\n        // 추천 영화 가져오기\n        const recommendationsResponse = await fetch(`/api/ai/predict/${userId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}`, // 토큰 추가\n          },\n        });\n\n        if (!recommendationsResponse.ok) {\n          const errorMessage = await recommendationsResponse.text();\n          throw new Error(`추천 요청 실패: ${errorMessage}`);\n        }\n\n        const recommendationsData = await recommendationsResponse.json();\n\n        // movieCd 기반 상세 영화 데이터 가져오기\n        const movies = await Promise.all(\n          recommendationsData.map(async (movie) => {\n            try {\n              const detailResponse = await fetch(\n                `/api/movies/detail/${movie.movieCd}?language=ko`,\n                {\n                  headers: {\n                    Authorization: `Bearer ${accessToken}`, // 토큰 추가\n                  },\n                }\n              );\n\n              if (!detailResponse.ok) {\n                console.error(`영화 상세 정보 요청 실패: ${movie.movieCd}`);\n                return null;\n              }\n\n              const detailData = await detailResponse.json();\n              return {\n                id: movie.movieCd,\n                title: detailData.title,\n                posterPath: detailData.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${detailData.poster_path}`\n                  : null,\n              };\n            } catch (error) {\n              console.error(`영화 상세 정보 요청 중 오류 발생: ${movie.movieCd}`, error);\n              return null;\n            }\n          })\n        );\n\n        setRecommendations(movies.filter((movie) => movie !== null)); // 유효한 데이터만 추가\n      } catch (error) {\n        console.error('Error:', error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchNicknameAndRecommendations();\n  }, [userId]);\n\n  const handleMovieClick = (movieId) => {\n    navigate(`/api/movies/detail/${movieId}?language=ko`);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"recommend-page\">\n        <Navbar />\n        <div className=\"recommend-content\">\n          <p>데이터를 불러오는 중입니다...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"recommend-page\">\n      <Navbar />\n      <div className=\"recommend-content\">\n        <h2>{nickname} 님을 위한 추천 영화는?</h2>\n        {error ? (\n          <p className=\"error-message\">{error}</p>\n        ) : (\n          <div className=\"movie-list\">\n            {recommendations.map((movie) => (\n              <div\n                className=\"movie-item\"\n                key={movie.id}\n                onClick={() => handleMovieClick(movie.id)} // 클릭 이벤트 추가\n              >\n                {movie.posterPath ? (\n                  <img\n                    src={movie.posterPath}\n                    alt={movie.title}\n                    className=\"movie-poster\"\n                  />\n                ) : (\n                  <div className=\"no-poster\">포스터 없음</div>\n                )}\n                <h3 className=\"movie-title\">{movie.title}</h3>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 챗봇 버튼 */}\n      <button\n        className=\"chatbot-button\"\n        aria-label=\"챗봇 열기\"\n        onClick={() => setChatOpen(!chatOpen)}\n      >\n        💬\n      </button>\n\n      {/* Chatbot 컴포넌트 */}\n      <Chatbot isOpen={chatOpen} onClose={() => setChatOpen(false)} />\n    </div>\n  );\n};\n\nexport default RecommendPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}