{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MovieRecommendations\\\\frontend\\\\src\\\\components\\\\list\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = ({\n  isOpen,\n  onClose\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]); // 대화 내역\n  const [input, setInput] = useState(''); // 입력된 메시지\n  const userName = '사용자'; // 사용자 이름\n  const aiName = 'AI'; // AI 이름\n  const userProfile = 'https://via.placeholder.com/40?text=U'; // 사용자 프로필 이미지\n  const aiProfile = 'https://via.placeholder.com/40?text=AI'; // AI 프로필 이미지\n\n  // 메시지 전송 처리\n  const handleSend = async () => {\n    if (!input.trim()) {\n      alert('메시지를 입력해주세요.');\n      return;\n    }\n    const timestamp = new Date().toLocaleTimeString(); // 현재 시간\n    const userMessage = {\n      sender: 'user',\n      text: input,\n      time: timestamp,\n      name: userName,\n      profile: userProfile\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      var _data$;\n      const token = localStorage.getItem('token'); // 토큰 가져오기\n      if (!token) {\n        throw new Error('로그인이 필요합니다. 토큰이 없습니다.');\n      }\n      const response = await fetch('/api/ai/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}` // 토큰 추가\n        },\n        body: JSON.stringify({\n          text: input\n        }) // 요청 본문에 입력된 텍스트 추가\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP 상태 코드: ${response.status}`);\n      }\n      const data = await response.json();\n      const aiMessage = {\n        sender: 'ai',\n        text: ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.llm_response) || data.llm_response || 'AI 응답 없음',\n        time: new Date().toLocaleTimeString(),\n        name: aiName,\n        profile: aiProfile\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('AI 응답 처리 중 오류 발생:', error);\n      const errorMessage = {\n        sender: 'ai',\n        text: 'AI 응답 처리에 실패했습니다. 나중에 다시 시도해 주세요.',\n        time: new Date().toLocaleTimeString(),\n        name: aiName,\n        profile: aiProfile\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n    setInput(''); // 입력 초기화\n  };\n  if (!isOpen) return null; // 창이 닫혀있으면 렌더링하지 않음\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uCC57\\uBD07\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        className: \"chat-close-button\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender === 'user' ? 'user-message' : 'bot-message'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: msg.profile,\n          alt: `${msg.name} profile`,\n          className: \"chat-profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-message-header\",\n            children: [msg.name, \" \\u2022 \", msg.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-message-content\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","isOpen","onClose","_s","messages","setMessages","input","setInput","userName","aiName","userProfile","aiProfile","handleSend","trim","alert","timestamp","Date","toLocaleTimeString","userMessage","sender","text","time","name","profile","prev","_data$","token","localStorage","getItem","Error","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","status","data","json","aiMessage","llm_response","error","console","errorMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","msg","index","src","alt","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/MovieRecommendations/frontend/src/components/list/Chatbot.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = ({ isOpen, onClose }) => {\r\n  const [messages, setMessages] = useState([]); // 대화 내역\r\n  const [input, setInput] = useState(''); // 입력된 메시지\r\n  const userName = '사용자'; // 사용자 이름\r\n  const aiName = 'AI'; // AI 이름\r\n  const userProfile = 'https://via.placeholder.com/40?text=U'; // 사용자 프로필 이미지\r\n  const aiProfile = 'https://via.placeholder.com/40?text=AI'; // AI 프로필 이미지\r\n\r\n  // 메시지 전송 처리\r\n  const handleSend = async () => {\r\n    if (!input.trim()) {\r\n      alert('메시지를 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    const timestamp = new Date().toLocaleTimeString(); // 현재 시간\r\n    const userMessage = {\r\n      sender: 'user',\r\n      text: input,\r\n      time: timestamp,\r\n      name: userName,\r\n      profile: userProfile,\r\n    };\r\n\r\n    setMessages((prev) => [...prev, userMessage]);\r\n\r\n    try {\r\n      const token = localStorage.getItem('token'); // 토큰 가져오기\r\n      if (!token) {\r\n        throw new Error('로그인이 필요합니다. 토큰이 없습니다.');\r\n      }\r\n\r\n      const response = await fetch('/api/ai/chatbot', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`, // 토큰 추가\r\n        },\r\n        body: JSON.stringify({ text: input }), // 요청 본문에 입력된 텍스트 추가\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP 상태 코드: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      const aiMessage = {\r\n        sender: 'ai',\r\n        text: data[0]?.llm_response || data.llm_response || 'AI 응답 없음',\r\n        time: new Date().toLocaleTimeString(),\r\n        name: aiName,\r\n        profile: aiProfile,\r\n      };\r\n\r\n      setMessages((prev) => [...prev, aiMessage]);\r\n    } catch (error) {\r\n      console.error('AI 응답 처리 중 오류 발생:', error);\r\n\r\n      const errorMessage = {\r\n        sender: 'ai',\r\n        text: 'AI 응답 처리에 실패했습니다. 나중에 다시 시도해 주세요.',\r\n        time: new Date().toLocaleTimeString(),\r\n        name: aiName,\r\n        profile: aiProfile,\r\n      };\r\n\r\n      setMessages((prev) => [...prev, errorMessage]);\r\n    }\r\n\r\n    setInput(''); // 입력 초기화\r\n  };\r\n\r\n  if (!isOpen) return null; // 창이 닫혀있으면 렌더링하지 않음\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-header\">\r\n        <h4>챗봇</h4>\r\n        <button onClick={onClose} className=\"chat-close-button\">×</button>\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`chat-message ${\r\n              msg.sender === 'user' ? 'user-message' : 'bot-message'\r\n            }`}\r\n          >\r\n            <img\r\n              src={msg.profile}\r\n              alt={`${msg.name} profile`}\r\n              className=\"chat-profile\"\r\n            />\r\n            <div>\r\n              <div className=\"chat-message-header\">\r\n                {msg.name} • {msg.time}\r\n              </div>\r\n              <div className=\"chat-message-content\">{msg.text}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"메시지를 입력하세요...\"\r\n        />\r\n        <button onClick={handleSend}>전송</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}