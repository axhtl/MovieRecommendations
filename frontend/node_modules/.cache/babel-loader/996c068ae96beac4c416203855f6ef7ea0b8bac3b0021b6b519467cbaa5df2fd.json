{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MovieRecommendations\\\\frontend\\\\src\\\\components\\\\list\\\\UpcomingMovies.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { tmdbApiClient } from '../../api/tmdb';\nimport '../styles/UpcomingMovies.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpcomingMovies = () => {\n  _s();\n  const [upcomingMovies, setUpcomingMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchUpcomingMovies = async () => {\n      try {\n        const response = await tmdbApiClient.get('/movie/upcoming', {\n          params: {\n            language: 'ko-KR',\n            region: 'KR'\n          }\n        });\n        setUpcomingMovies(response.data.results.slice(0, 2)); // 상위 2개 영화만 저장\n      } catch (err) {\n        console.error('개봉 예정 영화 데이터를 가져오는 중 오류 발생:', err);\n        setError('영화를 불러오는 중 오류가 발생했습니다.');\n      }\n    };\n    fetchUpcomingMovies();\n  }, []);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 21\n  }, this);\n  if (!upcomingMovies.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\uB85C\\uB529 \\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 38\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upcoming-movies\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAC1C\\uBD09 \\uC608\\uC815 \\uC601\\uD654\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-list\",\n      children: upcomingMovies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://image.tmdb.org/t/p/w300${movie.poster_path}`,\n          alt: movie.title,\n          className: \"movie-poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"movie-title\",\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"movie-release-date\",\n          children: [\"\\uAC1C\\uBD09\\uC77C: \", movie.release_date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(UpcomingMovies, \"vivUXLiEFvjE7nB7ENaD40NioU0=\", false, function () {\n  return [useNavigate];\n});\n_c = UpcomingMovies;\nexport default UpcomingMovies;\nvar _c;\n$RefreshReg$(_c, \"UpcomingMovies\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","tmdbApiClient","jsxDEV","_jsxDEV","UpcomingMovies","_s","upcomingMovies","setUpcomingMovies","error","setError","navigate","fetchUpcomingMovies","response","get","params","language","region","data","results","slice","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","map","movie","src","poster_path","alt","title","release_date","id","_c","$RefreshReg$"],"sources":["C:/Users/MovieRecommendations/frontend/src/components/list/UpcomingMovies.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { tmdbApiClient } from '../../api/tmdb';\r\nimport '../styles/UpcomingMovies.css';\r\n\r\nconst UpcomingMovies = () => {\r\n  const [upcomingMovies, setUpcomingMovies] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchUpcomingMovies = async () => {\r\n      try {\r\n        const response = await tmdbApiClient.get('/movie/upcoming', {\r\n          params: {\r\n            language: 'ko-KR',\r\n            region: 'KR',\r\n          },\r\n        });\r\n        setUpcomingMovies(response.data.results.slice(0, 2)); // 상위 2개 영화만 저장\r\n      } catch (err) {\r\n        console.error('개봉 예정 영화 데이터를 가져오는 중 오류 발생:', err);\r\n        setError('영화를 불러오는 중 오류가 발생했습니다.');\r\n      }\r\n    };\r\n\r\n    fetchUpcomingMovies();\r\n  }, []);\r\n\r\n  if (error) return <p>{error}</p>;\r\n  if (!upcomingMovies.length) return <p>로딩 중...</p>;\r\n\r\n  return (\r\n    <div className=\"upcoming-movies\">\r\n      <h2>개봉 예정 영화</h2>\r\n      <div className=\"movie-list\">\r\n        {upcomingMovies.map((movie) => (\r\n          <div className=\"movie-card\" key={movie.id}>\r\n            <img\r\n              src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\r\n              alt={movie.title}\r\n              className=\"movie-poster\"\r\n            />\r\n            <p className=\"movie-title\">{movie.title}</p>\r\n            <p className=\"movie-release-date\">개봉일: {movie.release_date}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpcomingMovies;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}